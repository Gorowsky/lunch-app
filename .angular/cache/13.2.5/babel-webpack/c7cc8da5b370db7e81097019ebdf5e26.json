{"ast":null,"code":"import { of } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"angular-2-local-storage\";\n/**\n * Cachable system. Storage can be changed in module import.\n */\n\nexport let LunchApiService = /*#__PURE__*/(() => {\n  class LunchApiService {\n    constructor(http, storageService) {\n      this.http = http;\n      this.storageService = storageService;\n      this.STORAGE_PREFIX = \"lunch-api\";\n      this.PORT = \"8081\";\n      this.HOST = \"localhost\";\n      this.LUNCH_API_ROOT = `http://${this.HOST}:${this.PORT}`;\n    }\n\n    fromStorage(caller, stream) {\n      const data = this.storageService.get(`${this.STORAGE_PREFIX}-${caller}`);\n\n      if (!data) {\n        return stream.pipe(tap(data => this.storageService.set(`${this.STORAGE_PREFIX}-${caller}`, data)));\n      }\n\n      return of(data);\n    }\n\n    getLunchSpots() {\n      return this.fromStorage(\"getLunchSpots\", this.http.get(`${this.LUNCH_API_ROOT}/lunch-spots`));\n    }\n\n  }\n\n  LunchApiService.ɵfac = function LunchApiService_Factory(t) {\n    return new (t || LunchApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.LocalStorageService));\n  };\n\n  LunchApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LunchApiService,\n    factory: LunchApiService.ɵfac\n  });\n  return LunchApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}
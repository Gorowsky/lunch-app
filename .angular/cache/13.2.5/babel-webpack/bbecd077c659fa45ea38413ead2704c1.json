{"ast":null,"code":"import { InjectionToken, NgModule, Inject, Injectable, Optional, defineInjectable, inject } from '@angular/core';\nimport { Observable, Subscriber } from 'rxjs';\nimport { share } from 'rxjs/operators';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nconst LOCAL_STORAGE_SERVICE_CONFIG = new InjectionToken('LOCAL_STORAGE_SERVICE_CONFIG');\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nlet LocalStorageModule = /*#__PURE__*/(() => {\n  class LocalStorageModule {\n    /**\n     * @param {?=} userConfig\n     * @return {?}\n     */\n    static forRoot(userConfig = {}) {\n      return {\n        ngModule: LocalStorageModule,\n        providers: [{\n          provide: LOCAL_STORAGE_SERVICE_CONFIG,\n          useValue: userConfig\n        }]\n      };\n    }\n\n  }\n\n  LocalStorageModule.ɵfac = function LocalStorageModule_Factory(t) {\n    return new (t || LocalStorageModule)();\n  };\n\n  LocalStorageModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: LocalStorageModule\n  });\n  LocalStorageModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return LocalStorageModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst DEPRECATED = 'This function is deprecated.';\n/** @type {?} */\n\nconst LOCAL_STORAGE_NOT_SUPPORTED = 'LOCAL_STORAGE_NOT_SUPPORTED';\n\nclass LocalStorageService {\n  /**\n   * @param {?=} config\n   */\n  constructor(config = {}) {\n    this.isSupported = false;\n    this.notifyOptions = {\n      setItem: false,\n      removeItem: false\n    };\n    this.prefix = 'ls';\n    this.storageType = 'localStorage';\n    this.errors = new Subscriber();\n    this.removeItems = new Subscriber();\n    this.setItems = new Subscriber();\n    this.warnings = new Subscriber();\n    let {\n      notifyOptions,\n      prefix,\n      storageType\n    } = config;\n\n    if (notifyOptions != null) {\n      let {\n        setItem,\n        removeItem\n      } = notifyOptions;\n      this.setNotify(!!setItem, !!removeItem);\n    }\n\n    if (prefix != null) {\n      this.setPrefix(prefix);\n    }\n\n    if (storageType != null) {\n      this.setStorageType(storageType);\n    }\n\n    this.errors$ = new Observable(\n    /**\n    * @param {?} observer\n    * @return {?}\n    */\n    observer => this.errors = observer).pipe(share());\n    this.removeItems$ = new Observable(\n    /**\n    * @param {?} observer\n    * @return {?}\n    */\n    observer => this.removeItems = observer).pipe(share());\n    this.setItems$ = new Observable(\n    /**\n    * @param {?} observer\n    * @return {?}\n    */\n    observer => this.setItems = observer).pipe(share());\n    this.warnings$ = new Observable(\n    /**\n    * @param {?} observer\n    * @return {?}\n    */\n    observer => this.warnings = observer).pipe(share());\n    this.isSupported = this.checkSupport();\n  }\n  /**\n   * @param {?} key\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  add(key, value) {\n    if (console && console.warn) {\n      console.warn(DEPRECATED);\n      console.warn('Use `LocalStorageService.set` instead.');\n    }\n\n    return this.set(key, value);\n  }\n  /**\n   * @param {?=} regularExpression\n   * @return {?}\n   */\n\n\n  clearAll(regularExpression) {\n    // Setting both regular expressions independently\n    // Empty strings result in catchall RegExp\n\n    /** @type {?} */\n    let prefixRegex = !!this.prefix ? new RegExp('^' + this.prefix) : new RegExp('');\n    /** @type {?} */\n\n    let testRegex = !!regularExpression ? new RegExp(regularExpression) : new RegExp('');\n\n    if (!this.isSupported) {\n      this.warnings.next(LOCAL_STORAGE_NOT_SUPPORTED);\n      return false;\n    }\n    /** @type {?} */\n\n\n    let prefixLength = this.prefix.length;\n\n    for (let key in this.webStorage) {\n      // Only remove items that are for this app and match the regular expression\n      if (prefixRegex.test(key) && testRegex.test(key.substr(prefixLength))) {\n        try {\n          this.remove(key.substr(prefixLength));\n        } catch (e) {\n          this.errors.next(e.message);\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n  /**\n   * @param {?} key\n   * @return {?}\n   */\n\n\n  deriveKey(key) {\n    return `${this.prefix}${key}`;\n  }\n  /**\n   * @template T\n   * @param {?} key\n   * @return {?}\n   */\n\n\n  get(key) {\n    if (!this.isSupported) {\n      this.warnings.next(LOCAL_STORAGE_NOT_SUPPORTED);\n      return null;\n    }\n    /** @type {?} */\n\n\n    let item = this.webStorage ? this.webStorage.getItem(this.deriveKey(key)) : null; // FIXME: not a perfect solution, since a valid 'null' string can't be stored\n\n    if (!item || item === 'null') {\n      return null;\n    }\n\n    try {\n      return JSON.parse(item);\n    } catch (e) {\n      return null;\n    }\n  }\n  /**\n   * @return {?}\n   */\n\n\n  getStorageType() {\n    return this.storageType;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  keys() {\n    if (!this.isSupported) {\n      this.warnings.next(LOCAL_STORAGE_NOT_SUPPORTED);\n      return [];\n    }\n    /** @type {?} */\n\n\n    let prefixLength = this.prefix.length;\n    /** @type {?} */\n\n    let keys = [];\n\n    for (let key in this.webStorage) {\n      // Only return keys that are for this app\n      if (key.substr(0, prefixLength) === this.prefix) {\n        try {\n          keys.push(key.substr(prefixLength));\n        } catch (e) {\n          this.errors.next(e.message);\n          return [];\n        }\n      }\n    }\n\n    return keys;\n  }\n  /**\n   * @return {?}\n   */\n\n\n  length() {\n    /** @type {?} */\n    let count = 0;\n    /** @type {?} */\n\n    let storage = this.webStorage;\n\n    for (let i = 0; i < storage.length; i++) {\n      if (storage.key(i).indexOf(this.prefix) === 0) {\n        count += 1;\n      }\n    }\n\n    return count;\n  }\n  /**\n   * @param {...?} keys\n   * @return {?}\n   */\n\n\n  remove(...keys) {\n    /** @type {?} */\n    let result = true;\n    keys.forEach(\n    /**\n    * @param {?} key\n    * @return {?}\n    */\n    key => {\n      if (!this.isSupported) {\n        this.warnings.next(LOCAL_STORAGE_NOT_SUPPORTED);\n        result = false;\n      }\n\n      try {\n        this.webStorage.removeItem(this.deriveKey(key));\n\n        if (this.notifyOptions.removeItem) {\n          this.removeItems.next({\n            key: key,\n            storageType: this.storageType\n          });\n        }\n      } catch (e) {\n        this.errors.next(e.message);\n        result = false;\n      }\n    });\n    return result;\n  }\n  /**\n   * @param {?} key\n   * @param {?} value\n   * @return {?}\n   */\n\n\n  set(key, value) {\n    // Let's convert `undefined` values to `null` to get the value consistent\n    if (value === undefined) {\n      value = null;\n    } else {\n      value = JSON.stringify(value);\n    }\n\n    if (!this.isSupported) {\n      this.warnings.next(LOCAL_STORAGE_NOT_SUPPORTED);\n      return false;\n    }\n\n    try {\n      if (this.webStorage) {\n        this.webStorage.setItem(this.deriveKey(key), value);\n      }\n\n      if (this.notifyOptions.setItem) {\n        this.setItems.next({\n          key: key,\n          newvalue: value,\n          storageType: this.storageType\n        });\n      }\n    } catch (e) {\n      this.errors.next(e.message);\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n\n\n  checkSupport() {\n    try {\n      /** @type {?} */\n      let supported = this.storageType in window && window[this.storageType] !== null;\n\n      if (supported) {\n        this.webStorage = window[this.storageType]; // When Safari (OS X or iOS) is in private browsing mode, it\n        // appears as though localStorage is available, but trying to\n        // call .setItem throws an exception.\n        //\n        // \"QUOTA_EXCEEDED_ERR: DOM Exception 22: An attempt was made\n        // to add something to storage that exceeded the quota.\"\n\n        /** @type {?} */\n\n        let key = this.deriveKey(`__${Math.round(Math.random() * 1e7)}`);\n        this.webStorage.setItem(key, '');\n        this.webStorage.removeItem(key);\n      }\n\n      return supported;\n    } catch (e) {\n      this.errors.next(e.message);\n      return false;\n    }\n  }\n  /**\n   * @private\n   * @param {?} prefix\n   * @return {?}\n   */\n\n\n  setPrefix(prefix) {\n    this.prefix = prefix; // If there is a prefix set in the config let's use that with an appended\n    // period for readability:\n\n    /** @type {?} */\n\n    const PERIOD = '.';\n\n    if (this.prefix && !this.prefix.endsWith(PERIOD)) {\n      this.prefix = !!this.prefix ? `${this.prefix}${PERIOD}` : '';\n    }\n  }\n  /**\n   * @private\n   * @param {?} storageType\n   * @return {?}\n   */\n\n\n  setStorageType(storageType) {\n    this.storageType = storageType;\n  }\n  /**\n   * @private\n   * @param {?} setItem\n   * @param {?} removeItem\n   * @return {?}\n   */\n\n\n  setNotify(setItem, removeItem) {\n    if (setItem != null) {\n      this.notifyOptions.setItem = setItem;\n    }\n\n    if (removeItem != null) {\n      this.notifyOptions.removeItem = removeItem;\n    }\n  }\n\n}\n\nLocalStorageService.ɵfac = function LocalStorageService_Factory(t) {\n  return new (t || LocalStorageService)(ɵngcc0.ɵɵinject(LOCAL_STORAGE_SERVICE_CONFIG, 8));\n};\n\nLocalStorageService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: LocalStorageService,\n  factory: LocalStorageService.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\n\n/** @nocollapse */\nLocalStorageService.ngInjectableDef = defineInjectable({\n  factory: function LocalStorageService_Factory() {\n    return new LocalStorageService(inject(LOCAL_STORAGE_SERVICE_CONFIG, 8));\n  },\n  token: LocalStorageService,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { LocalStorageModule, LocalStorageService, LOCAL_STORAGE_SERVICE_CONFIG as ɵa }; //# sourceMappingURL=angular-2-local-storage.js.map","map":null,"metadata":{},"sourceType":"module"}